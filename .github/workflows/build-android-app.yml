name: Build and Deploy Android app

on:
  pull_request:
    types:
      - closed
    branches:
      - dev

jobs:
  build:
    if: github.event.pull_request.merged == true
    environment: STAGING_ENV
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install gh -y
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Get PR Description
        id: pr_desc
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_BODY=$(gh pr view "$PR_NUMBER" --json body -q '.body' | tr -d '\r')
          echo "PR_BODY<<EOF" >> $GITHUB_ENV
          echo "$PR_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Check if Build & Tagging Required
        id: check_tag
        run: |
          if echo "$PR_BODY" | grep -q "is_create_tag=true"; then
            echo "BUILD_AND_TAG=true" >> $GITHUB_ENV
          else
            echo "BUILD_AND_TAG=false" >> $GITHUB_ENV
          fi

      - name: Install Java
        if: env.BUILD_AND_TAG == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Setup Node.js
        if: env.BUILD_AND_TAG == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Cache node_modules
        if: env.BUILD_AND_TAG == 'true'
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install Dependencies
        if: env.BUILD_AND_TAG == 'true'
        run: yarn install --frozen-lockfile

      - name: Remove Hermes tarball
        if: env.BUILD_AND_TAG == 'true'
        run: rm -rf node_modules/react-native/sdks/download/hermes.tar.gz

      - name: Create .env File
        if: env.BUILD_AND_TAG == 'true'
        run: |
          echo "ENV=${{ vars.ENV }}" > .env.staging
          echo "APP_URL=${{ vars.APP_URL }}" >> .env.staging
          echo "URL_API=${{ vars.URL_API }}" >> .env.staging
          echo "URL_IMAGE=${{ vars.URL_IMAGE }}" >> .env.staging
          echo "MIDTRANS_CLIENT_KEY=${{ vars.MIDTRANS_CLIENT_KEY }}" >> .env.staging
          echo "API_MIDTRANS=${{ vars.API_MIDTRANS }}" >> .env.staging
          echo "APP_ID=${{ vars.APP_ID }}" >> .env.staging
          echo "API_MESSENGER=${{ vars.API_MESSENGER }}" >> .env.staging

      - name: Build APK application
        if: env.BUILD_AND_TAG == 'true'
        run: |
          cd android
          ./gradlew assembleStagingRelease --max-workers=2 --parallel --no-daemon

      - name: Create Git Tag
        if: env.BUILD_AND_TAG == 'true'
        run: |
          VERSION_NAME=$(grep -oP 'versionName\s+"\K[^"]+' android/app/build.gradle)
          git tag v${VERSION_NAME}-staging
          git push origin v${VERSION_NAME}-staging

      - name: Upload artifact to Firebase App Distribution
        if: env.BUILD_AND_TAG == 'true'
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_CREDENTIALS }}
          groups: TESTERS
          file: android/app/build/outputs/apk/staging/release/app-staging-release.apk

      - name: Setup Revopush CLI
        uses: 'revopush/revopush-github-action@v1.0.0'
        id: setup-revopush-cli
        with:
          version: 'latest'
          accessKey: ${{ secrets.GH_REVOPUSH_ACCESS_KEY }}

      - name: Release Android bundle
        run: revopush release-react get_ride_customer android -d Development -m --disable-duplicate-release-error --target-binary-version $VERSION_NAME
